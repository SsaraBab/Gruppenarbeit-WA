## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
ifelse(x > 7, x == 7, x)
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
## Somit ist die SPalte fuer Interesse an Mathe erledigt.
## Interesse an Programmieren
Interesse_Programmieren <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter
## Gleichverteilung ziehen, noch ohne Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0,
Interesse_Programmieren = Interesse_Programmieren)
## Spalte fuer Interesse am Programmieren hinzufuegen, um direkt im Data Frame weiterzuarbeiten.
Daten
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
ifelse(x > 7, x == 7, x)
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
## Somit ist die SPalte fuer Interesse an Mathe erledigt.
Daten
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
ifelse(x > 7, x == 7, x)
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
## Somit ist die SPalte fuer Interesse an Mathe erledigt.
Daten
?ifelse
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
ifelse(x > 7, x[] <- 7, x)
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
Daten
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
i <- 1
while(i <= 100){
if(x[i] > 7) x[i] <- 7
else x[i] <- x[i]
i <- i + 1
}
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
Daten
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
i <- 1
while(i <= 100){
if(x[i] > 7) x[i] <- 7
else x[i] <- x[i]
i <- i + 1
}
x
}
## Part 1 der Aufgabe
## ID fuer ID-Spalte anlegen
ID <- c(1:100)
## Wert fuer Zufallsgenerator setzen, um Ziehung von Zufallszahlen reproduzierbar zu machen
set.seed(2022)
## Alter simulieren
Alter.Normalverteilt <- rnorm(n=100,mean=25,sd=2) #Normalverteiltes Alter (Erwartungswert 25, Stand.abw. 2) mit Nachkommastellen
Alter <- signif(Alter.Normalverteilt, digits = 2) #Rundung des Alters
## Also ist 'Alter' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter) ## erster Dataframe mit den Infos zu ID und Alter.
## Studienfach simulieren
Faecher <- c("Statistik", "Data Science", "Mathe", "Informatik") # Vektor der STudienfaecher erzeugt
Studienfach <- sample(Faecher, size = 100, replace = TRUE, prob = c(0.3,0.3,0.1,0.2))
## Studienfaecher zufaellig ausgewahlt aus dem Vektor, wobei Statistik & Data Science Wkeit von 0.3 haben,
## Mathe von 0.1 und Informatik von 0.2
## Also ist 'Studienfach' letztendlich Vektor f?r die Spalte.
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach) ## Dataframe mit ergaenzten Daten zum Studienfach.
## Interesse an Mathematik simulieren
Interesse_Mathe0 <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter Gleichvert. erzeugen
## dabei noch kein Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0)
## Vektor ohne Zusammenhang zun?chst zum Daraframe hinzufuegen, um ihn dort zu bearbeiten.
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Mathe", Daten$Interesse_Mathe + 2, Daten$Interesse_Mathe)
## Interesse plus 2 falls das Studienfach Mathe
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Statistik", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
Daten$Interesse_Mathe <- ifelse(Daten$Studienfach == "Data Science", Daten$Interesse_Mathe + 1, Daten$Interesse_Mathe)
## Interesse plus 1 falls das Studienfach Statistik oder Data Science.
abrunden <- function(x){## Funktion zum Abrunden: falls Addition zu Punktzahl hoeher als 7
##gefuehrt hat, Wert fuer Interesse auf 7 reduzieren
i <- 1
while(i <= 100){
if(x[i] > 7) x[i] <- 7
else x[i] <- x[i]
i <- i + 1
}
x
}
Daten$Interesse_Mathe <- abrunden(Daten$Interesse_Mathe) ## abrunden durchfuehren
any(Daten$Interesse_Mathe > 7) ## Kontrolle, ob Rundung korrekt durchgefuehrt wurde
Daten
## Interesse an Programmieren
Interesse_Programmieren <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter
## Gleichverteilung ziehen, noch ohne Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0,
Interesse_Programmieren = Interesse_Programmieren)
## Spalte fuer Interesse am Programmieren hinzufuegen, um direkt im Data Frame weiterzuarbeiten.
Daten$Interesse_Programmieren <- ifelse(Daten$Studienfach == "Informatik",
Daten$Interesse_Programmieren*1.5, Daten$Interesse_Programmieren)
## Interesse Mal 1.5 falls das Studienfach Informatik.
Daten$Interesse_Programmieren <- ifelse(Daten$Studienfach == "Data Science",
Daten$Interesse_Programmieren*1.2, Daten$Interesse_Programmieren)
## Interesse Mal 1.2 falls das Studienfach Data Science.
Daten$Interesse_Programmieren <- signif(Daten$Interesse_Programmieren, digits = 1) # Vektor auf 1 Ziffer runden
Daten$Interesse_Programmieren <- abrunden(Daten$Interesse_Programmieren)
# Eintraege groesser als 7 auf 7 abrunden
any(Daten$Interesse_Programmieren > 7) ## Kontrolle, ob Funktion korrekt die Eintraege auf 7 begrenzt hat
## Interesse an Programmieren
Interesse_Programmieren <- sample(1:7, size = 100, replace = TRUE) ## zunaechst Vektor aus diskreter
## Gleichverteilung ziehen, noch ohne Zusammenhang mit Studienfach
Daten <- data.frame(ID = ID, Alter = Alter, Studienfach = Studienfach, Interesse_Mathe = Interesse_Mathe0,
Interesse_Programmieren = Interesse_Programmieren)
## Spalte fuer Interesse am Programmieren hinzufuegen, um direkt im Data Frame weiterzuarbeiten.
Daten$Interesse_Programmieren <- ifelse(Daten$Studienfach == "Informatik",
Daten$Interesse_Programmieren*1.5, Daten$Interesse_Programmieren)
## Interesse Mal 1.5 falls das Studienfach Informatik.
Daten$Interesse_Programmieren <- ifelse(Daten$Studienfach == "Data Science",
Daten$Interesse_Programmieren*1.2, Daten$Interesse_Programmieren)
## Interesse Mal 1.2 falls das Studienfach Data Science.
Daten$Interesse_Programmieren <- signif(Daten$Interesse_Programmieren, digits = 1) # Vektor auf 1 Ziffer runden
Daten$Interesse_Programmieren <- abrunden(Daten$Interesse_Programmieren)
# Eintraege groesser als 7 auf 7 abrunden
any(Daten$Interesse_Programmieren > 7) ## Kontrolle, ob Funktion korrekt die Eintraege auf 7 begrenzt hat
Daten
any(Daten$Interesse_Programmieren < 0) ## Kontrolle, ob Funktion korrekt die Eintraege auf groesser 0 begrenzt hat
any(Daten$Interesse_Mathe < 0) ## Kontrolle, ob Funktion korrekt die Eintraege auf groesser 0 begrenzt hat
## Funktionen-R-Skript zur Analyse des Datensatzes
##setwd("~/Documents/GitHub/Gruppenarbeit-WA") ## hier jede*r bitte seinen eigenen Pfad eingeben
## oder weiss jemand, ob man das bei GitHub irgendwie allgemein einstellen kann?
source("Funktionen-R-Skript2.R") ## ganz zu Anfang die Datei mit den Hilfsfunktionen einlesen
## (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken fuer metrische Variablen
## berechnet und ausgibt
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
med <- median(x) ## berechne den Median und weise ihm einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,".
Und der Median ist",med, ".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
metrisch(c(1:100))
## Funktionen-R-Skript zur Analyse des Datensatzes
##setwd("~/Documents/GitHub/Gruppenarbeit-WA") ## hier jede*r bitte seinen eigenen Pfad eingeben
## oder weiss jemand, ob man das bei GitHub irgendwie allgemein einstellen kann?
source("Funktionen-R-Skript2.R") ## ganz zu Anfang die Datei mit den Hilfsfunktionen einlesen
## (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken fuer metrische Variablen
## berechnet und ausgibt
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
med <- median(x) ## berechne den Median und weise ihm einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,". Und der Median ist",med, ".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
metrisch(c(1:100))
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,"und der Median ist",med, ".")
## Funktionen-R-Skript zur Analyse des Datensatzes
##setwd("~/Documents/GitHub/Gruppenarbeit-WA") ## hier jede*r bitte seinen eigenen Pfad eingeben
## oder weiss jemand, ob man das bei GitHub irgendwie allgemein einstellen kann?
source("Funktionen-R-Skript2.R") ## ganz zu Anfang die Datei mit den Hilfsfunktionen einlesen
## (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken fuer metrische Variablen
## berechnet und ausgibt
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
med <- median(x) ## berechne den Median und weise ihm einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,"und der Median ist",med, ".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
metrisch(c(1:100))
## Funktionen-R-Skript zur Analyse des Datensatzes
##setwd("~/Documents/GitHub/Gruppenarbeit-WA") ## hier jede*r bitte seinen eigenen Pfad eingeben
## oder weiss jemand, ob man das bei GitHub irgendwie allgemein einstellen kann?
source("Funktionen-R-Skript2.R") ## ganz zu Anfang die Datei mit den Hilfsfunktionen einlesen
## (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken fuer metrische Variablen
## berechnet und ausgibt
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
med <- median(x) ## berechne den Median und weise ihm einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,"und der Median ist",med,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
metrisch(c(1:100))
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
modus <- max(t) ##Modus; welches Objekt hat die groesste absolute Haeufigkeit
Ergebnis <- paste("Die absoluten Haeufigkeiten sind",t,",die relativen Haeufigkeiten sind",h,
"und der Modus liegt bei", modus,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
?rep
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,3,4)))
kategoriell(y)
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
modus <- max(t) ##Modus; welches Objekt hat die groesste absolute Haeufigkeit
Ergebnis <- paste("Die absoluten Haeufigkeiten sind",t,",die relativen Haeufigkeiten sind",h,"und der Modus liegt bei", modus,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,3,4)))
kategoriell(y)
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
modus <- max(t) ##Modus; welches Objekt hat die groesste absolute Haeufigkeit
Ergebnis <- paste("Der Modus liegt bei", modus,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,3,4)))
kategoriell(y)
## für kategoriale Variablen berechnet und ausgibt
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
modus <- max(t) ##Modus; welches Objekt hat die groesste absolute Haeufigkeit
med <- median(t)
Ergebnis <- paste("Der Modus liegt bei", modus,", und der Median liegt bei",med,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,3,4)))
kategoriell(y)
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,4,1)))
kategoriell(y)
## (b) Eine Funktion, die verschiedene geeignete deskriptive Statistiken
## für kategoriale Variablen berechnet und ausgibt
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
modus <- max(t) ##Modus; welches Objekt hat die groesste absolute Haeufigkeit
Ergebnis <- paste("Der Modus liegt bei", modus,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,4,1)))
kategoriell(y)
?prob.table
??prob.table
## Funktionen-R-Skript zur Analyse des Datensatzes
##setwd("~/Documents/GitHub/Gruppenarbeit-WA") ## hier jede*r bitte seinen eigenen Pfad eingeben
## oder weiss jemand, ob man das bei GitHub irgendwie allgemein einstellen kann?
source("Funktionen-R-Skript2.R") ## ganz zu Anfang die Datei mit den Hilfsfunktionen einlesen
## (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken fuer metrische Variablen
## berechnet und ausgibt
metrisch <- function(x){ ## Funktion fuer metrische Variablen
if(is.factor(x) == TRUE | is.character(x) == TRUE) return("Die Variable muss metrisch sein.")
## Funktion soll zunaechst pruefen, dass x kein factor oder character ist --
## andere ungeeignete Datentypen bitte hier ergaenzen!
else {x <- x} ## weiss nicht, wie ich R sonst sagen soll, dass R einfach weitermacht
m <- mean(x) ## berechne das arithmetische Mittel und weise ihm einen Namen zu
stabw <- sd(x) ## berechne die Standardabweichung und weise ihr einen Namen zu
med <- median(x) ## berechne den Median und weise ihm einen Namen zu
Ergebnis <- paste("Das arithmetische Mittel ist ",m," mit einer Standardabweichung von ",stabw,"und der Median ist",med,".")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
## Beispiel zum Ausprobieren:
metrisch(c(1:100))
## (b) Eine Funktion, die verschiedene geeignete deskriptive Statistiken
## für kategoriale Variablen berechnet und ausgibt
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
Ergebnis <- paste("")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,4,1)))
kategoriell(y)
## (c) Eine Funktion, die geeignete deskriptive bivariate Statistiken für
## den Zusammenhang zwischen zwei kategorialen Variablen
## berechnet ausgibt
bi.kategoriell <- function(x, y){ ## Funktion fuer zwei kategorielle Variablen
t <- table(x, y) ##Erzeugung von KOntingenztafel
h <- prob.table()
Ergebnis <- paste("")
## Gebe die errechneten Werte aus
return(Ergebnis) ## letzten Abstand noch korrigieren!
}
kategoriell <- function(x){ ## Funktion fuer kategorielle Variablen
t <- table(x) ##Erstellung einer Tabelle der absoluten Haeufigkeiten
h <- prop.table(t) ##Erstellung einer Tabelle der relaiven Haeufigkeiten
h <- round(h, digits = 2) ##Rundung der relativen Haeufigkeiten auf 2 Nachkommastellen
Ergebnis <- paste("")
## Gebe die errechneten Werte aus
return(h) ## letzten Abstand noch korrigieren!
}
y <- c(rep(c("eins", "zwei", "drei", "vier"), c(1,2,4,1)))
kategoriell(y)
bi.kategoriell <- function(x, y){ ## Funktion fuer zwei kategorielle Variablen
t <- table(x, y) ##Erzeugung von KOntingenztafel
h <- prob.table(t, 1)
Ergebnis <- paste("")
## Gebe die errechneten Werte aus
return(h) ## letzten Abstand noch korrigieren!
}
z <- c(rep(c("male", "female"), c(3,5)))
bi.kategoriell(y, z)
bi.kategoriell <- function(x, y){ ## Funktion fuer zwei kategorielle Variablen
t <- table(x, y) ##Erzeugung von KOntingenztafel
h <- prop.table(t, 1)
Ergebnis <- paste("")
## Gebe die errechneten Werte aus
return(h) ## letzten Abstand noch korrigieren!
}
z <- c(rep(c("male", "female"), c(3,5)))
bi.kategoriell(y, z)
z <- c(rep(c("male", "female", "nb"), c(3,3,2)))
bi.kategoriell(y, z)
z <- c(rep(c("male", "female", "nb"), c(2,3,2)))
bi.kategoriell(y, z)
z <- c(rep(c("male", "female", "nb"), c(2,3,3)))
bi.kategoriell(y, z)
?rep
l <- c(rep(c("male", "female"), 4))
